https://sql-academy.org/
Записи по мере прохождения курса.
==================
#ОСНОВЫ
##Литералы
SELECT (5 * 2 - 6) / 2 AS Result;
SELECT YEAR("2022-06-16") AS year; #Возвращает только год
SELECT * FROM FamilyMembers WHERE birthday > '1970-12-30'  #можно "19701230" или 19701230

SELECT UPPER("Hello world") AS upper_string;    #Результат большими буквами
SELECT LOWER('SQL Academy') AS lower_string;    #Результат маленькими буквами
SELECT INSTR('sql-academy', 'academy') AS idx;  #Результат = 5(с какого символа начинается 'academy')
SELECT member_name, YEAR(birthday) AS year_of_birth from FamilyMembers #Имя и год рождения

SELECT LENGTH('sql-academy') AS str_length;     #Результат = 11(длина строки) Ниже пример
    SELECT member_name,
	    LENGTH(member_name) AS fullname_length
    FROM FamilyMembers;

SELECT member_name,				#Полное имя и длина фамилии
	LENGTH(member_name) - INSTR(member_name, ' ') AS lastname_length
FROM FamilyMembers;
==================
##Исключение дубликатов DISTINCT
SELECT [DISTINCT] поля_таблиц FROM наименование_таблицы;
SELECT DISTINCT first_name, last_name FROM User; #Список без повторяющихся имен

##Условный оператор WHERE
SELECT [DISTINCT] поля_таблиц FROM наим_таблицы WHERE условие_на_огр_строк [логический_оператор];
##Операторы сравнения
SELECT
    	2 = 1,
	'a' = 'a',
	NULL <=> NULL,
	2 <> 2,
	3 < 4,
	10 <= 10,
	7 > 1,
	8 >= 10;
##Логические операторы
NOT	Меняет значение оператора сравнения на противоположный
OR	Возвращает общее значение выражения истинно, если хотя бы одно из них истинно
AND	Возвращает общее значение выражения истинно, если они оба истинны
XOR	Возвращает общее значение выражения истинно, если один и только один аргумент является истинным
Пример:
	SELECT * FROM Trip
	WHERE plane = 'Boeing' AND NOT town_from = 'London';
	SELECT * FROM Rooms WHERE has_kitchen = 1 AND has_internet = 1; #Все комнаты где есть кухня и интернет.

##Операторы IS NULL, BETWEEN, IN позволяют узнать:
IS NULL равно ли проверяемое значение NULL, т.е. пустое ли значение.
Пример:
	SELECT * FROM Teacher
	WHERE middle_name IS NOT NULL;
BETWEEN min AND max расположено ли проверяемое значение столбца в интервале
Пример:
	SELECT * FROM Payments
	WHERE unit_price BETWEEN 100 AND 500;
IN входит ли проверяемое значение столбца в список определённых значений.
Пример:
	SELECT * FROM FamilyMembers
	WHERE status IN ('father', 'mother');
Задачка:
Выведите информацию о студентах из таблицы Student, у которых год рождения соответствует 
одному из перечисленных: 2000, 2002 и 2004.
	SELECT * from Student where year(birthday) IN ('2000','2002','2004');

##Оператор LIKE #поиск всех у кого в строке есть..
Пример:
	SELECT name, email FROM Users
	WHERE email LIKE '%@hotmail.%'
... WHERE поле_таблицы LIKE 'text%'	#начинающимся на «text»
... WHERE поле_таблицы LIKE '%text'	#заканчивающимся на «text»
... WHERE поле_таблицы LIKE 'begin%end'	#начинающихся на «begin» и заканчивающихся на «end»
... WHERE поле_таблицы LIKE '_ext'	#имеющим длину 4 символа, при этом 3 последних 
					обязательно должны быть «ext». 
					Например, слова «text» и «next»

SELECT job_id FROM Jobs WHERE progress LIKE '3!%' ESCAPE '!'; #только где равно 3%
								(без ESCAPE выдаст все где есть 3)

Пример(всех с фамилией quincey):
	SELECT member_name 
	FROM FamilyMembers where member_name like '%Quincey'

##Оператор REGEXP/ Регулярные выражения которые трудно реализовать с помощью оператора LIKE.
... WHERE table_field REGEXP 'pattern';
*	0 или более экземпляров предшествующей строки
+	1 или более экземпляров предшествующих строк
.	Любой одиночный символ
?	0 или 1 экземпляр предшествующей строки
^	Соответствует началу строки
$	Соответствует окончанию строки
[abc]	Любой символ, указанный в квадратных скобках
[^abc]	Любой символ, не указанный в квадратных скобках
[A-Z], [А-Я]	Соответствует любой заглавной букве латинского и кириллического алфавита соответственно
[a-z], [а-я]	Соответствует любой строчной букве латинского и кириллического алфавита соответственно
[0-9]	Соответствует любой цифре
p1|p2|p3	Соответствует любому из паттернов p1 или p2 или p3
{n}	n экземпляров предыдущей строки
{m,n}	от m до n экземпляров предыдущей строки
Пример:
	SELECT * FROM Users WHERE name REGEXP '^John'				#все, чьи имена начинаются на «John»
	SELECT * FROM Users WHERE phone_number REGEXP '^[^28]*$' 		#номер не содержит цифр «2» и «8»
	SELECT name, phone_number FROM Users WHERE phone_number REGEXP '^\\+7'	#номер начинается на «+7»
	SELECT * FROM Users WHERE email REGEXP '@(outlook.com|icloud.com)$' 	#Найдём всех, чей адрес 
										электронной почты oканчивается 
										на «@outlook.com» или на «@icloud.com»:
Задачка:
SELECT id, address from Rooms where address REGEXP 'Avenue'
SELECT name, email FROM Users WHERE email REGEXP '@(outlook.com|live.com)$'


---------------------
МОДУЛЬ 2
##Сортировка, оператор ORDER BY / Группировка по нескольким столбцам
SELECT поля_таблиц FROM наим_табл WHERE ... ORDER BY столбец_1 [ASC | DESC][, столбец_n [ASC | DESC]]
ASC - сортировка по возрастанию (по умолчанию)
DESC - сортировка по убыванию
Задачка:
SELECT * from FamilyMembers where member_name like '%Quincey'order by status ASC, member_name ASC

##Группировка, оператор GROUP BY
SELECT [литералы, агрегатные_функции, поля_группировки] FROM имя_таблицы GROUP BY поля_группировки;

Пример:
	SELECT home_type, AVG(price) as avg_price FROM Rooms GROUP BY home_type
Результат:	
	Private room	89.4286
	Entire home/apt	148.6667
	Shared room	40
Описание: Запрос сначала разбивает все записи из таблицы Rooms на 3 группы, опираясь на поле home_type. 
Далее, для каждой группы суммирует все значения, взятые из поля price

	##Агрегатные функции
		SUM(поле_таблицы)	Возвращает сумму значений
		AVG(поле_таблицы)	Возвращает среднее значение
		COUNT(поле_таблицы)	Возвращает количество записей
		MIN(поле_таблицы)	Возвращает минимальное значение
		MAX(поле_таблицы)	Возвращает максимальное значение
	Пример:
		Для каждого жилого помещения найдём самую позднюю дату выезда (поле end_date)
		SELECT room_id, MAX(end_date) AS last_end_date FROM Reservations GROUP BY room_id

Задачка:
SELECT class, COUNT(student) AS count FROM Student_in_class GROUP BY class ORDER BY count DESC;
SELECT status, min(birthday) AS birthday from FamilyMembers GROUP BY status #найти самого старшего в группе

SELECT plane, AVG(TIMESTAMPDIFF(SECOND, time_out, time_in)) AS time FROM Trip GROUP BY plane;
	Итог:
		plane	time
		Boeing	32965
		TU-154	23040
		IL-86	7020
select room_id, avg(price) as avg_price, count(room_id) as count from reservations group by room_id
order by count desc, avg_price desc

##Оператор HAVING
Общая структура запроса с оператором HAVING

	SELECT [константы, агрегатные_функции, поля_группировки]
	FROM имя_таблицы
	WHERE условия_на_ограничения_строк
	GROUP BY поля_группировки
	HAVING условие_на_ограничение_строк_после_группировки
	ORDER BY условие_сортировки
Пример:
SELECT home_type, AVG(price) as avg_price FROM Rooms GROUP BY home_type HAVING avg_price > 50

Задание: Выведите типы комнат (поле home_type) и разницу между самым дорогим и самым дешевым 
	представителем данного типа. В итоговую выборку включите только те типы жилья, количество 
	которых в таблице Rooms больше или равно 2.
SELECT home_type, max(price) - min(price) AS difference from Rooms GROUP BY home_type HAVING COUNT(*) >= 2;


---------------------
МОДУЛЬ 3

Многотабличные запросы, JOIN
SELECT поля_таблиц
FROM таблица_1
[INNER] | [[LEFT | RIGHT | FULL][OUTER]] JOIN таблица_2
    ON условие_соединения
[[INNER] | [[LEFT | RIGHT | FULL][OUTER]] JOIN таблица_n
    ON условие_соединения]

Пример:
	SELECT family_member, member_name, amount * unit_price AS price FROM Payments
	INNER JOIN FamilyMembers ON Payments.family_member = FamilyMembers.member_id
Итог:
family_member	member_name	price
	1	Headley Quincey	2000
	2	Flavia Quincey	2100
	3	Andie Quincey	100

Вывести все столбцы из нескольких таблиц(* после названия таблицы в селекте):
	SELECT Payments.*, FamilyMembers.* FROM Payments INNER JOIN FamilyMembers 
	ON Payments.family_member = FamilyMembers.member_id

INNER JOIN
Пример:
	SELECT family_member, member_name FROM Payments INNER JOIN FamilyMembers 
	ON Payments.family_member = FamilyMembers.member_id

Или с where:
	SELECT family_member, member_name FROM Payments, FamilyMembers
    	WHERE Payments.family_member = FamilyMembers.member_id
Задание:
	SELECT name, student FROM Class, Student_in_class WHERE Class.id = Student_in_class.class

	SELECT good_name FROM Payments INNER JOIN FamilyMembers ON Payments.family_member = FamilyMembers.member_id
		INNER JOIN Goods ON Payments.good = Goods.good_i WHERE status in ('son')
	SELECT room_id, AVG(rating) AS avg_score FROM Reviews INNER JOIN Reservations 
		ON Reservations.id = Reviews.reservation_id GROUP BY room_id;

OUTER JOIN
Пример(LEFT OUTER JOIN):
	SELECT Timepair.id 'timepair.id', start_pair, end_pair,
    	Schedule.id 'schedule.id', date, class, number_pair, teacher, subject, classroom
	FROM Timepair LEFT JOIN Schedule ON Schedule.number_pair = Timepair.id;

SELECT поля_таблиц
FROM левая_таблица LEFT JOIN правая_таблица
    ON правая_таблица.ключ = левая_таблица.ключ
WHERE правая_таблица.ключ IS NULL

Задание:
Выведите имя first_name и фамилию last_name каждого учителя из таблицы Teacher, а также 
количество занятий, в которых он был назначен преподавателем. Если преподаватель не был назначен 
ни на одно занятие, то выведите 0. Для вывода количества занятий используйте псевдоним amount_classes.
Пример:
	SELECT first_name, last_name, COUNT(Schedule.teacher) as amount_classes from teacher 
	LEFT JOIN Schedule on Schedule.teacher = Teacher.id GROUP BY Teacher.id

Ограничение выборки, оператор LIMIT
SELECT поля_выборки
FROM список_таблиц
LIMIT [количество_пропущенных_записей,] количество_записей_для_вывода;
Пример:
id	name
1	Don_avia
2	Aeroflot
3	Dale_avia
4	air_France
5	British_AW
SELECT * FROM Company LIMIT 2, 3;
Вывод: 
id	name
3	Dale_avia
4	air_France
5	British_AW
Пример:
SELECT ID, name FROM Company ORDER BY name ASC LIMIT 2
Задание:
Выведите всю информацию о пользователе из таблицы Users, кто является 
владельцем самого дорогого жилья (таблица Rooms).
	SELECT * FROM Users WHERE id = 
	(SELECT owner_id FROM Rooms WHERE price = (SELECT MAX(price) FROM Rooms));

Подзапросы с несколькими строками и одним столбцом
Задание: Имена всех владельцев жилья, которые сами при этом никогда не снимали жилье
	SELECT DISTINCT name FROM Users INNER JOIN Rooms ON Users.id = Rooms.owner_id
	WHERE Users.id <> ALL (SELECT DISTINCT user_id FROM Reservations)
Задание: Выведите названия товаров из таблицы Goods (поле good_name), которые ещё ни разу 
не покупались ни одним из членов семьи (таблица Payments).
	SELECT DISTINCT good_name FROM Goods 
	WHERE good_id NOT IN (SELECT DISTINCT good FROM Payments);

Многостолбцовые подзапросы
Задание: Выведите список комнат (все поля, таблица Rooms), которые по своим удобствам 
(has_tv, has_internet, has_kitchen, has_air_con) совпадают с комнатой с идентификатором "11".
	SELECT * FROM Rooms WHERE (has_tv, has_air_con, has_internet, has_kitchen) 
	IN (SELECT has_tv, has_air_con, has_internet, has_kitchen FROM Rooms WHERE id = 11);

Коррелированные подзапросы
#Все предыдущие рассматриваемые подзапросы были некоррелированные (независимые). 
#Коррелированные подзапросы ссылаются на один или несколько столбцов основного запроса.
Задание: С помощью коррелированного подзапроса выведите имена всех членов семьи (member_name) 
и цену их самого дорогого купленного товара. Для вывода цены самого дорогого купленного товара 
используйте псевдоним good_price. Если такого товара нет, выведите NULL.
	SELECT FamilyMembers.member_name, (
   	SELECT MAX(Payments.unit_price)
    	FROM Payments
    	WHERE Payments.family_member = FamilyMembers.member_id) AS good_price FROM FamilyMembers;
Вывод: 
member_name	good_price
Headley Quincey	2000
Flavia Quincey	66000
Andie Quincey	2200

Обобщённое табличное выражение, оператор WITH
-- Пример использования конструкции WITH
WITH Aeroflot_trips AS
    (SELECT TRIP.* FROM Company
        INNER JOIN Trip ON Trip.company = Company.id WHERE name = "Aeroflot")
SELECT plane, COUNT(plane) AS amount FROM Aeroflot_trips GROUP BY plane;
Синтаксис оператора WITH
MySQL
WITH название_cte [(столбец_1 [, столбец_2 ] …)] AS (подзапрос)
    [, название_cte [(столбец_1 [, столбец_2 ] …)] AS (подзапрос)] …

